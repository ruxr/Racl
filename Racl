#!/bin/sh
ID='@(#) Racl V5.2 © 2024 by Roman Oreshnikov'
H='Скрипт автоматизации ведения ACL

	'$ID'

	Это бесплатное ПО поставляется без каких-либо ГАРАНТИЙ

Использование: Racl [параметр]... файл...

Параметр:
  -h      Вывод этого текста
  -n      Не выводить построенные ACL
  -l LST  Имя файла для записи списка МСЭ
  -o      Выполнить оптимизацию ACL (с отчетом: -O)
  -r HTM  Имя файла для записи HTML-отчёта

Аргумент:
  файл[ы] описания сетевой инфраструктуры и правил доступа

Сообщать об ошибках <r.oreshnikov@gmail.com>'
End() { echo "${1:+Racl: }${*# }" >&2; exit 1; }
Chk() {
	[ -z "$1" ] || End "Параметр -$P уже задан${2:+ как '$1'!}"
	[ $# = 2 ] || case ${2:-/$OPTARG/} in
	//|*/-*|*/./|*/../|/*//*|*[!0-9A-Za-z.\/_-]*)
		End "Недопустимое значение для ключа '$P'!"
	esac
}
RACL_N=
RACL_L=
RACL_O=
RACL_R=
while getopts hnl:oOr: P; do
	case $P in
	h) echo "$H"; exit;;
	n) Chk "$RACL_N" ""; RACL_N=y;;
	l) Chk "$RACL_L" $RACL_L; RACL_L=$OPTARG;;
	o|O) Chk "$RACL_O" ""; RACL_O=$P;;
	r) Chk "$RACL_R" $RACL_R; RACL_R=$OPTARG;;
	?) End "" "'Racl -h' для дополнительной информации"
	esac
done
shift $(($OPTIND - 1))
[ $# = 0 ] && End "Отсутствует входной файл!"
for P do [ -f "$P" -a -r "$P" ] || End "Файл '$P' недоступен!"; done
gawk -vid="$ID" -vno="$RACL_N" -vlst="$RACL_L" -vopt="$RACL_O" -vhtm="$RACL_R" '
BEGIN {
	### Константы
	acl =	1	# ACL
	any =	"any"	# суперсеть 0/0
	cfg =	4	# исходник
	def =	2	# описание
	dev =	4	# МСЭ
	ip =	5	# двоичный IP-адрес
	lim =	25	# разрешено ошибок до аварийного завершения
	msk =	6	# реверсная маска
	max =	0xffffffff
	net =	3	# сеть
	out =	"/dev/stderr"
	prt =	1	# порт
	tb =	"</H3>\n<TABLE BORDER=1 CELLSPACING=0>\n<TR><TH>№<BR>п/п<TH>"
	tc =	" ALIGN=center>"
	td =	"<TD>"
	te =	"</TABLE>\n<H3>"
	tr =	"<TR><TD" tc
	B[any]	# Зарезервированные имена
	B["drop"]
	B["pass"]
	B["eq"]
	B["gt"]
	B["lt"]
	B["neg"]
	B["range"]
	B["established"]
	B["reflect"]
	B["evaluate"]
	B["log"]
	B["packet-too-big"]
	B["ttl-exceeded"]
	B["unreachable"]
	B["echo-reply"]
	B["echo"]
	C["echo"]	# ICMP
	C["echo-reply"]
	C["packet-too-big"]
	C["ttl-exceeded"]
	C["unreachable"]
	P["ip"]	# Протоколы
	P["icmp"]
	P["tcp"]
	P["udp"]
	P["eigrp"]
	P["ospf"]
	### Переменные
	#cur	- текущий № обоснования
	#err	- счетчик ошибок
	#hdr	- заголовок отчёта
	#htm	- имя HTML-файла отчета
	#lst	- имя файла списка МСЭ
	#lvl	- уровень обработки
	#no	- запрет вывода построенных ACL
	#ord	- текущее обоснованиe
	#opt	- флаг оптимизации ACL
	#txt	- текущее описание для правил ACL
	### Массивы
	#A[ACL][acl] = TYPE	- тип: 0 - inside, 1 - outside
	#A[ACL][def] = TXT	- описание
	#A[ACL][net][IP]	- сети
	#A[ACL][dev][IP]	- МСЭ
	#D[№] = IP		- МСЭ в порядке DNS-имён
	#E[IP]			- интерфейсы МСЭ
	#F[IP][ACL]		- МСЭ
	#G[GRP][IP]		- группы
	#J[№] = ACL		- ACL в алфавитном порядке
	#L[IP]			- локальные IP
	#N[№] = IP		- сети в порядке реверсной маски
	#T[ACL][RULE][№] = TXT	- таблица правил
	#V[IP][acl] = ACL	- ACL
	#V[IP][def] = DEF	- описание
	#V[IP][net] = IP	- сеть
	#V[IP][cfg] = CFG	- исходник
	#V[IP][ip] = ip		- двоичный адрес
	#V[IP][msk] = msk	- реверсная маска
	#W[ACL][№] = RULE	- итоговые правила ACL
	#X[№] = ORD		- номера обоснований
	#Z[ORD] = TXT		- обоснования
	Say("Чтение исходных данных")
}
/^\s*(#.*)*$/ { next }
{
	while(sub(/\\+\s*$/, "") && getline s) $0 = $0 " " s
	sub(/^\s+/, ""); gsub(/\s+/, " "); sub(/\s+$/, "")
	while(lvl < 4) switch(lvl) {
		case "": ++lvl; if($1 !~ /^[0-9]/) { hdr = Htm($0); next }
		case 1: if($1 ~ /^[0-9]/) { IP(); next } ++lvl
			asorti(N, N, "by_msk")
		case 2: if($1 !~ /^[+-]/) { Grp(); next } ++lvl
		case 3: if($1 ~ /^[+-]$/) { Acl($1 == "+"); next } ++lvl; Lan()
	}
	if($0 ~ /(pass|drop) /) Rule()
	else if($1 ~ /^;/) txt = gensub(/;\s*/, "", 1)
	else if($1 ~ /^[0-9]/) Def()
	else if(isID($1)) Grp()
	else if(!txt && ord) Z[ord] = Z[ord] "\n" $0
	else {
		if(cur in X) cur++
		if($0 in Z) Err("Такое обоснование уже есть")
		else txt = Z[X[cur] = ord = $0]
	}
}
END {
	if(err > lim) End("Слишком много ошибок в исходных данных")
	if(err || !length(A)) End("Некорректные исходные данные")
	for(n in W) asorti(W[n], W[n], "by_grp")
	if(opt) {
		Say("Оптимизация ACL")
		for(a in J) {
			l = length(W[a = J[a]])
			for(i in W[a])
				if(!(s = W[a][i])) delete W[a][i]
				else if(s ~ /drop ip/) Opt(".")
				else if(s ~ /pass ip/) Opt("pass")
				else if(s ~ /pass icmp \S+ \S+$/) Opt("pass icmp")
		}
	}
	if(htm != "") Html()
	if(lst != "") {
		Say("Вывод списка МСЭ")
		for(d in D) print gensub(/\..*/, " " D[d], 1, V[D[d]][def]) >lst
	}
	if(!no) {
		Say("Вывод построенных ACL")
		for(a in J) {
			asorti(A[l = a = J[a]][dev], D, "by_def")
			for(d in D) l = l " " V[D[d]][def]
			print "ACL " gensub(/\.\S+/, "", "g", l)
			for(i in W[a]) print W[a][i]
		}
	}
	Say("Успешное завершение работы")
}
function Acl(i) {
	if(!((a = $2) in A)) return Err(a " - ACL не определен")
	if(acl in A[a]) return Err(a " - ACL уже зарегистрирован")
	if(!(n = chkID($3, t = "группы МСЭ"))) return
	if(!(n in G)) return Err(n " - группа МСЭ не зарегистрирована")
	if(Cut(3)) {
		A[a][def] = $0; A[a][acl] = i
		for(d in G[n]) F[d][a] = A[a][dev][d]
	}
}
function Blk(f) {
	if(s) { for(d in L) if(isIn(V[r], V[d])) return f }
	else for(d in L) if(isIn(V[i], V[d])) return f
	for(n in A[a][net]) for(d in L)
		if(s) { if(isIn(V[d], V[r])) f = Reg(50, "drop ip any " d,
			any, d, "Запрет доступа к локальным адресам", 1)
		} else if(isIn(V[d], V[i])) f = Reg(10, "drop ip " d " any",
			d, any, "Запрет доступа с локальными адресами", 1)
	return f ? f : 75
}
function Col() {
	if(s < 3 && V[t][def]) t = V[t][def]
	t = s == 5 ? Ref(t, "_") : Htm(t)
	H[p][s] = "<TD" (c > 1 ? " ROWSPAN=" c : "") (s == 5 ? tc : ">") t
	t = T[n][H[p = i][3]][s]; c = 1
}
function Cut(i) {
	if($(i + 1)) return sub("^(\\s*\\S+){" i "}\\s*", "")
	Err((i == 3 ? $2 : $1) " - Отсутствует описание")
}
function Def(S) {
	if(!(n = getIP($1, S)) || !Cut(1)) return
	if(!(n in V)) addIP(S, 1, $0)
	else if(V[n][def] == "") V[n][def] = $0
	else Err(S[cfg] " - описание уже задано")
}
function End(s) { Say("! " s); exit 1 }
function Err(s) { print FILENAME "[" FNR "]: " s >out; if(++err > lim) exit 1 }
function Grp(N, S) {
	if(!(g = chkID($1, t = "группы"))) return
	for(f = 1; f++ < NF;)
		if($f ~ /^[0-9]/) {
			if(!(n = getIP($f, S)) || !addIP(S, 1)) return
			if(n == any) return Err($f " - не может быть членом " t)
			N[n]
		} else {
			if(!chkID($f, t)) return
			if(!($f in G)) return Err($f " - неизвестная группа")
			for(n in G[$f]) N[n]
		}
	if(length(N)) { delete G[g]; for(n in N) G[g][n] }
	else Err(g " - группа не содержит объектов")
}
function Host(s) {
	"host " s | getline s
	if(s !~ /)$/) return gensub(/^.* (\S+).$/, "\\1", 1, s)
}
function Htm(s) {
	gsub(/(\\n)+/, "\n", s); sub(/^\s+/, "", s); sub(/\s+$/, "", s)
	gsub(/&/, "\\&amp;", s); gsub(/</, "\\&lt;", s); gsub(/>/, "\\&gt;", s)
	gsub(/\n+/, "<BR>", s); return s
}
function Html() {
	Say("Вывод HTML-отчета")
	print "<!DOCTYPE html>\n<HTML>\n<HEAD>\n<META",
		"HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html;",
		"charset=utf-8\"/>\n<TITLE>" hdr "</TITLE>\n<STYLE>\ntd",
		"{ padding-left: .2em; padding-right: .2em; }\n</STYLE>\n"\
		"</HEAD>\n<BODY>\n<H2" tc hdr "</H2>\n<H3>1.",
		"Используемые МСЭ" tb "DNS-имя<TH>IP<TH>ACL" >htm
	for(d in D) print tr d td V[d = D[d]][def] td d Lst(F[d], 1) >htm
	print te "2. Используемые ACL" tb\
		"ACL<TH>Тип<TH>МСЭ<TH>IP<TH>Описание" >htm
	for(a in J) print tr a td Ref(a = J[a]) td\
		(A[a][acl] ? "outside" : "inside") Lst(A[a][dev], def)\
		Lst(A[a][net], cfg) td Htm(A[a][def]) >htm
	print te "3. Используемые IP-адреса" tb "IP<TH>ACL<TH>Описание" >htm
	for(i in V) if(V[i][def] !~ /^(\s.*)?$/) H[i]
	asorti(H, H, "by_ip")
	for(i in H) print tr i td V[i = H[i]][cfg] ((a = V[i][acl]) ? td\
		Ref(a) : "<TH>-") td Htm(V[i][def]) >htm
	print te "4. Правила ACL" tb "Источник (инициатор)<TH>Приемник",
		"(ответчик)<TH>Правило ACL<TH>Назначение",
		"правила<TH>№<BR>осн." >htm
	for(a in J) {
		n = J[a]; delete H; s = 0
		for(i in W[n]) H[++s][3] = W[n][i]
		if(1 in H) for(s = 0; s++ < 5;) {
			t = T[n][H[p = 1][3]][s]; c = 0
			for(i in H) if(T[n][H[i][3]][s] == t) c++; else Col()
			Col(); if(s == 2) s++
		}
		print tr "<B>" a "</B><TD COLSPAN=5 ID=" n "><B>" n ": "\
			A[n][def] "</B>" >htm
		for(i in H) print tr a "." i (1 in H[i] ? H[i][1] : "")\
			(2 in H[i] ? H[i][2] : "") "<TD NOWRAP>" H[i][3]\
			(4 in H[i] ? H[i][4] : "")\
			(5 in H[i] ? H[i][5] : "") >htm
	}
	print te "5. Обоснования" tb "Название<TH>Содержание" >htm
	for(n in X) print tr n "<TD ID=_" n ">" Htm(i = X[n]) td Htm(Z[i]) >htm
	print "</TABLE>\n<P STYLE=\"text-align:center; font:italic 70%",
		"small-caption;\">" id "</P>\n</BODY>\n</HTML>" >htm
}
function IP(S, a, l) {
	if(!(n = getIP($1, S))) return
	if(n in V) return Err($1 " - IP-адрес уже зарегистрирован")
	if((f = $2) != "-" && !(a = chkID($2, "ACL"))) return
	for(i in V)
		if(isIn(V[i], S)) return Err($1 " - уже зарегистрирован " i)
		else if(isIn(S, V[i])) if(!l || V[l][msk] < V[i][msk]) l = i
	if(n !~ "/" && !$3) $3 = Host(n)
	if(!Cut(2)) return
	if(S[msk] < max) N[V[n][net] = n]
	else { E[n]; V[n][net] = l; if(!a) a = V[l][acl] }
	V[n][def] = $0; V[n][ip] = S[ip]; V[n][msk] = S[msk]
	V[n][cfg] = S[cfg]; if(V[n][acl] = a) A[a][net][n]
}
function Lan() {
	if(err) exit
	Say("Проверка сетевой инфраструктуры")
	if(hdr == "") Err("Отсутствует заголовок")
	if(!length(N)) End("Нет зарегистрированных сетей")
	if(!length(A)) End("Нет зарегистрированных ACL")
	asorti(A, J)
	for(a in J) if(!(acl in A[a = J[a]])) Err(a " - ACL не описан")
	if(any in V && inLan(any))
		Err(V[any][cfg] " - не может быть локальной сетью")
	for(d in F) E[d]
	asorti(E, D)
	for(d in D) {
		t = V[d = D[d]][cfg] " - IP-адрес "\
			(d in F ? "управления" : "интерфейса") " МСЭ "
		if(d ~ "/") Err(t "не может быть сетью")
		else for(n in N) if(V[d][ip] == V[N[n]][ip])
			Err(t "совпадает с адресом сети")
		if(d in F && !inLan(d)) Err(t "не принадлежит ЛВС")
		if(!(s = V[d][def])) Err(t "без DNS-имени")
		else if(s "." !~ /^([a-zA-Z0-9](-?[a-zA-Z0-9])*\.)+$/ ||
			s ~ /[^.]{64,}/ || length(s) > 255)
				Err(s " - недопустимое DNS-имя для " d)
	}
	if(err) exit
	asorti(F, D, "by_def")
	for(n in N) if((a = V[n = N[n]][acl]) && !A[a][acl]) G["*"][n]
	for(i in V) if((inLan(i) || (i in E && !inLan(i))) && !L[i])
		for(n in N) if(inLan(n = N[n]) && isIn(V[i], V[n]))
			{ delete L[i]; break }
	for(a in A) for(i in A[a][net]) for(n in A[a][net])
		if(isIn(V[i], V[n])) delete A[a][net][i]
	Z[X[cur = 1] = "Алгоритм Racl"] = "ACL-правила построенные"\
	" по результатам анализа заданных взаимодействий алгоритмом Racl"
}
function Lst(S, f, L, s) {
	if(f == cfg) { for(l in S) L[l] = V[l][f]; f = !asort(L, L, "by_ip") }
	else if(f == def) { for(l in S) L[l] = V[l][f]; f = !asort(L) }
	else asorti(S, L)
	for(l in L) s = (s ? s "<BR>" : "") (f ? Ref(L[l]) : L[l])
	return td s
}
function Oper(s, R, g, f, S, D) {
	if(!s) return Err("Пустое поле " g)
	if(s in G) for(n in G[s]) D[n]
	else if(s ~ /^[0-9]/ || s == any)
		{ if(!(n = getIP(s, S))) return; addIP(S); D[n] }
	else return Err(s " - группа " g " не зарегистрирована")
	for(n in D) if(f || V[n][acl]) R[n] = V[n][acl]
	return isarray(R) ? 1 : Err(s " - отсутствуют подходящие IP для " g)
}
function Opt(c) {
	for(n = i; n++ < l;) if(W[a][n] ~ c &&
		(T[a][s][1] == T[a][d = W[a][n]][1] ||
		isIn(V[T[a][d][1]], V[T[a][s][1]])) &&
		(T[a][s][2] == T[a][d][2] ||
		isIn(V[T[a][d][2]], V[T[a][s][2]])))
			{ W[a][n] = ""; if(opt == "O") Say(a " " s " > " d) }
}
function Port(S) {
	if($(++f) != "")
	if(p == "tcp" || p == "udp") switch($f) {
		case "eq":
		case "gt":
		case "lt":
		case "neg":
			S[prt] = " " $f " " $(f + 1)
			if(isU16($(++f))) return ++f; return
		case "range":
			S[prt] = " " $f " " $(f + 1) " " $(f + 2)
			if(!isU16($(f + 1)) || !isU16($(f + 2))) return
			if($(f + 1) < $(f + 2)) return f + 3
			return Err(S[prt] " - недопустимый диапазон портов")
	} else if(p == "icmp" && $(f - 3) == p && $f in C) S[prt] = " " $(f++)
	return f
}
function Ref(s, p) { return "<A HREF=#" p s ">" s "</A>" }
function Reg(n, r, s, d, t, c) {
	W[a][r] = n; T[a][r][1] = s; T[a][r][2] = d
	T[a][r][4] = t; T[a][r][5] = c
}
function Rule(m, l, e, S, D, I, R) {
	if(cur == (f = 1)) return Err("Обоснование не задано")
	if(!txt) return Err("Отсутствует описание для правила")
	if(isID($f) && !($f in B))
		if($f in A) m = $(f++)
		else return Err($f " - ACL не зарегистрирован")
	if($f ~ /^[0-9]/)
		if($f ~ /^[1-9][0-9]*$/) l = $(f++)
		else return Err($f " - недопустимая позиция правила")
	if((c = $f) !~ /^(pass|drop)$/)
		return Err($f " - нераспознанный тип правила")
	if((p = $(++f)) == "") return Err("Протокол не указан")
	if(!(p in P)) return Err($f " - неподдерживаемый протокол")
	if(!Oper($(++f), I, "источника", m) || !(f = Port(S))) return
	if(!Oper($f, R, "приёмника", 1) || !(f = Port(D))) return
	if($f == "established")
		if(p == "tcp") D[prt] = D[prt] " " $(f++)
		else return Err($f " - недопустимое использование")
	if($f == "log") D[prt] = D[prt] " " $(f++)
	if($f == "reflect")
		if(c == "drop") return Err($f " - не может использоваться с " c)
		else if(!(e = chkID($(f + 1), "для " $f))) return
		else if(e in A) return Err($f e " - имя уже присвоено ACL")
		else D[prt] = D[prt] " " $(f++) " " $(f++)
	if($f != "") return Err($f " - нераспознанное поле правила")
	for(i in I) for(r in R) {
		if(m) a = m
		else if((a = I[i]) == (b = R[r]) && (i == r || !(r in E)))
			continue
		else if(V[i][net] == V[r][net]) a = b
		else if(i in E) a = V[V[i][net]][acl]
		t = c " " p " " i S[prt] " " r D[prt]
		if(t in W[a]) return Err(t " - уже используется")
		if(c == "drop" || (s = inLan(i)) == (inLan(r) || r in E)) n = 25
		else n = Blk(25)
		Reg(l ? l : n, t, i, r, txt, cur)
	}
	if(e) for(r in R) if(a = R[r]) Reg(5, "evaluate " e, "Ответчик",
		"Инициатор", "Реверсное правило", 1)
}
function Say(s) { print "Racl: " s >out }
function addIP(S, f, t) {
	if(n in V) return 1
	for(i in N) if(isIn(V[i = N[i]], S))
		V[n][def] = V[n][def] "\n" V[i][def]
	if(!(n in V)) for(i in N) if(isIn(S, V[i = N[i]]))
		{ V[n][acl] = V[V[n][net] = i][acl]; break }
	if(n in V) {
		if(!(net in V[n])) V[n][net] = n
		if(t) V[n][def] = t
		else if(!V[n][def])
			if(n !~ "/") V[n][def] = Host(n)
			else if(S[msk] > 0xffffffe0)
			for(i = S[ip]; and(i, S[msk]) == S[ip]; i++) {
				if(!((t = int2IP(i)) in V)) {
					V[t][cfg] = t; V[t][acl] = V[n][acl]
					V[t][ip] = i; V[t][net] = V[n][net]
					V[t][msk] = max; V[t][def] = Host(t)
				}
				V[n][def] = V[n][def] "\n" V[t][def]
			}
		V[n][ip] = S[ip]; V[n][msk] = S[msk]; return V[n][cfg] = S[cfg]
	}
	if(f) Err(S[cfg] " - отсутствует подходящая сеть")
}
function by_def(a, A, b, B) {
	if(V[a][def] > V[b][def]) return 1
	if(V[a][def] < V[b][def]) return -1
}
function by_grp(a, A, b, B) {
	if(A > B) return 1
	if(A < B) return -1
	if(V[T[n][a][1]][ip] > V[T[n][b][1]][ip]) return 1
	if(V[T[n][a][1]][ip] < V[T[n][b][1]][ip]) return -1
	if(V[T[n][a][2]][ip] > V[T[n][b][2]][ip]) return 1
	if(V[T[n][a][2]][ip] < V[T[n][b][2]][ip]) return -1
	if(a > b) return 1
	if(a < b) return -1
}
function by_ip(a, A, b, B) {
	if(V[a][ip] > V[b][ip]) return 1
	if(V[a][ip] < V[b][ip]) return -1
	if(V[a][msk] > V[b][msk]) return 1
	if(V[a][msk] < V[b][msk]) return -1
}
function by_msk(a, A, b, B) {
	if(V[a][msk] < V[b][msk]) return 1
	if(V[a][msk] > V[b][msk]) return -1
	if(V[a][ip] > V[b][ip]) return 1
	if(V[a][ip] < V[b][ip]) return -1
}
function chkID(s, t) {
	if(s == "") Err("Отсутствует имя " t)
	else if(!isID(s)) Err(s " - недопустимое имя " t)
	else if(s in B) Err(s " - зарезервированное имя")
	else return s
}
function getIP(s, S, i) {
	if(s == any && !i) { S[cfg] = "0/0"; S[ip] = S[msk] = 0; return s }
	if((m = split(s, S, "/")) == 1) i = 4
	else if(!m) return Err("IP адрес не задан")
	if(m > 2 || (n = isIP(S[1], i)) == "")
		return Err(s " - недопустимый IP адрес")
	if(i == 4) m = 0
	else if(S[2] !~ /^([12]?[0-9]|3[0-2])$/)
		return Err(s " - недопустимая маска")
	else if(and(n, m = rshift(max, S[2])))
		return Err(s " - маска должна быть больше")
	S[ip] = n; S[cfg] = s
	if(!m) { s = int2IP(n); S[msk] = max }
	else if(m == max) { s = any; S[msk] = 0 }
	else { s = int2IP(n) "/" S[2]; S[msk] = xor(max, m) }
	return s
}
function inLan(i) { return (!V[i][acl] || !A[V[i][acl]][acl]) }
function int2IP(i) {
	return and(rshift(i, 24), 255) "." and(rshift(i, 16), 255) "."\
		and(rshift(i, 8), 255) "." and(i, 255)
}
function isID(s) { return s ~ /^[a-zA-Z]([a-zA-Z0-9_-]?[a-zA-Z0-9])*$/ }
function isIP(i, n, A) {
	if(!(i = split(i, A, ".")) || i > 4 || i < n) return
	while(i) if(A[i] !~ /^(0|[1-9][0-9]{,2})$/ || A[i--] > 255) return
	return or(lshift(A[1], 24), lshift(A[2], 16), lshift(A[3], 8), A[4])
}
function isIn(S, D) { return S[msk] > D[msk] && and(S[ip], D[msk]) == D[ip] }
function isU16(s) {
	if(s ~ /^(0|[1-9][0-9]*)$/ && s <= 0xffff) return 1
	else if(s == "") Err("Отсутствует значение для номера порта")
	else Err(s " - недопустимое значение номера порта")
}' "$@"
